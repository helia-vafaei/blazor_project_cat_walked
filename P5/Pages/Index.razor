@page "/"
@using System.Drawing
@using Blazor.Extensions

@inject IJSRuntime JsRuntime;

<img @ref="_spritesheet" hidden src="assets/cat.png" />
<img @ref="_spritesheet2" hidden src="assets/cat2.png" />

<div id="canvasContainer" style="position: fixed; opacity: 1; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    BECanvasComponent _canvas;
    ElementReference _spritesheet;
    ElementReference _spritesheet2;
    GameContext _game;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));

            _game = await CatWalkGame.Create(_canvas, _spritesheet);

            // this will make sure that the viewport is correctly initialized
            await JsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));
        }
    }
    public async ValueTask baraks()
    {
        await CatWalkGame.Create(_canvas, _spritesheet2);
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        if (null == _game) return;
        await _game.Step(timeStamp);
    }

    [JSInvokable]
    public async ValueTask OnResize(int screenWidth, int screenHeight)
    {
        if (null == _game) return;
        _game.Display.Size = new Size(screenWidth, screenHeight);
        await baraks();
    }


}
